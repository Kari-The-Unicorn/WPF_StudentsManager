using System.Windows;
using System.Windows.Controls;
using WPF_StudentsManager.Model;

namespace WPF_StudentsManager.Controls
{
    /// <summary>
    /// Interaction logic for StudentDetailControl.xaml
    /// </summary>
    //[ContentProperty(Name = nameof(Student))]
    public sealed partial class StudentDetailControl : UserControl
    {
        //private Student _student; //generated by propfull + Tab - part 1

        public static readonly DependencyProperty StudentProperty =
            DependencyProperty.Register("Student", typeof(Student),
                typeof(StudentDetailControl), new PropertyMetadata(null));

        public StudentDetailControl()
        {
            InitializeComponent();
        }

        //public Student Student //generated by propfull + Tab - part 2
        //{
        //    get { return _student; }
        //    set
        //    {
        //        _student = value;
        //        txtFirstName.Text = _student?.FirstName ?? string.Empty; //student? if not null
        //        txtLastName.Text = _student?.LastName ?? string.Empty;
        //        chkIsActive.IsChecked = _student?.IsActive;
        //    }
        //}
        //Instead of this due to
        //<controls:StudentDetailControl Grid.Row ="1" Grid.Column= "1"
        //                               x:Name= "studentDetailControl"
        //                               Student= "{Binding ElementName=studentsListView, Path=SelectedItem, Mode=OneWay}" />
        // and Error "A binding cannot be set on Student property of StudentDetailControl. A binding can only be set on
        // Dependency Property of a Dependency Object"
        // So:
        // propdp Tab x2
        // after changing int on "public int MyProperty" then Tab x2 and it auto changes the rest types inside this block and next block

        public Student Student
        {
            get { return (Student)GetValue(StudentProperty); }
            set { SetValue(StudentProperty, value); }
        }

        //// Using a DependencyProperty as the backing store for Student.
        //// This enables animation, styling, binding, etc...
        //public static readonly DependencyProperty StudentProperty =
        //    DependencyProperty.Register("Student", typeof(Student),
        //        typeof(StudentDetailControl), new PropertyMetadata(null, StudentChanedCallback));
        // Moved to top because it enables animation, styling, binding, etc...

        //private static void StudentChanedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
        //{
        //    if (d is StudentDetailControl studentDetailControl)
        //    {
        //        var student = e.NewValue as Student;
        //        studentDetailControl.txtFirstName.Text = student?.FirstName ?? string.Empty;
        //        studentDetailControl.txtLastName.Text = student?.LastName ?? string.Empty;
        //        studentDetailControl.chkIsActive.IsChecked = student?.IsActive; }
        //}

        //private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        //{
        //    UpdateStudent();
        //}

        //private void CheckBoxIsActive_Checked(object sender, RoutedEventArgs e)
        //{
        //    UpdateStudent();
        //}
        //private void UpdateStudent()
        //{
        //    if (Student != null) //if student is selected
        //    {
        //        Student.FirstName = txtFirstName.Text;
        //        Student.LastName = txtLastName.Text;
        //        Student.IsActive = chkIsActive.IsChecked.GetValueOrDefault(); //IsChecked property of chkIsActive is nullable bool (bool?)
        //                                                                      //so GetValueOrDefault() to default is false
        //    }
        //}
    }
}
